# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      fail-fast: false
      matrix:
        version: [11, 12, 13]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: demarey/pharo-setup-gha@main
        with:
          version: ${{ matrix.version }}
          useBashOnWindows: true

      - name: Test installation
        run: |
          echo "$PATH"
          echo "$PHARO"
          echo "$PHARO_BASH"
          
          # Function to check if a string starts with a given prefix
          assert_starts_with() {
            if [[ "$1" == "$2"* ]]; then
              echo "Assertion passed: '$1' starts with '$2'."
              return 0  # success
            else
              echo "Assertion failed: '$1' does not start with '$2'."
              return 1  # failure
            fi
          }
          
          PHARO_VERSION=$($PHARO --headless Pharo.image eval 'SystemVersion current printString')
          assert_starts_with "$PHARO_VERSION" "'Pharo-${{ matrix.version }}"  # Should pass
        shell: bash

  test-vm-dir:
    strategy:
      fail-fast: false
      matrix:
        version: [13]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: demarey/pharo-setup-gha@main
        with:
          version: ${{ matrix.version }}
          vmDir: foo/bar
          useBashOnWindows: true

      - name: Test VM installation in a specific dir
        run: |
          echo "$PHARO"

          prefix=$(pwd)          
          # Check if $PHARO starts with $prefix and remove it
          if [[ "$PHARO" == "$prefix"* ]]; then
            var="${PHARO#$prefix}"
          fi

          found=$(find $(pwd)/foo/bar -type f \( -iname "pharo" -o -name "Pharo.exe" \))
          if [ -n "$found_files" ]; then
              echo "Assertion passed: Found Pharo executable $found"
          else
              echo "Assertion failed: No Pharo executable found"
              ls -R .
          fi
        shell: bash
  
